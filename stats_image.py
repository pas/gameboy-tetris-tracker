import cv2
import numpy as np
from PIL import Image


class StatsImage:
  def __init__(self):
    self._load_tiles()

  def get_static_left_part(self):
    return [[0x2F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F],

            [0x2F, 0x5A, 0x55, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x5A, 0x55],
            [0x2F, 0x5C, 0x5B, 0x1C, 0x1D, 0x0A, 0x1D, 0x1C, 0x2F, 0x5C, 0x71],
            [0x2F, 0x5C, 0x2D, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x2E, 0x71],

            [0x2F, 0x5C, 0x81, 0x81, 0x81, 0x55, 0x56, 0x56, 0x56, 0x5A, 0x71],  # J
            [0x2F, 0x5C, 0x2C, 0x2C, 0x81, 0x5B, 0x00, 0x00, 0x01, 0x5C, 0x71],
            [0x2F, 0x5C, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x2E, 0x71],

            [0x2F, 0x5C, 0x82, 0x82, 0x2C, 0x55, 0x56, 0x56, 0x56, 0x5A, 0x71],  # Z
            [0x2F, 0x5C, 0x2C, 0x82, 0x82, 0x5B, 0x00, 0x00, 0x01, 0x5C, 0x71],
            [0x2F, 0x5C, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x2E, 0x71],

            [0x2F, 0x5C, 0x84, 0x84, 0x84, 0x55, 0x56, 0x56, 0x56, 0x5A, 0x71],  # Z
            [0x2F, 0x5C, 0x84, 0x2C, 0x2C, 0x5B, 0x00, 0x00, 0x01, 0x5C, 0x71],
            [0x2F, 0x5C, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x2E, 0x71],

            [0x2F, 0x5C, 0x2C, 0x83, 0x83, 0x55, 0x56, 0x56, 0x56, 0x5A, 0x71],
            [0x2F, 0x5C, 0x2C, 0x83, 0x83, 0x5B, 0x00, 0x00, 0x02, 0x5C, 0x71],
            [0x2F, 0x2E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x2E, 0x2D],

            [0x2F, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56]]

  def get_static_right_part(self):
    return [[0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x2F],

            [0x5A, 0x55, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x5A, 0x55, 0x2F], # empty
            [0x74, 0x5B, 0x2F, 0x2F, 0x2F, 0x2F, 0x27, 0x2F, 0x5C, 0x5B, 0x2F],
            [0x74, 0x5B, 0xB9, 0xBA, 0xE9, 0xEA, 0x2F, 0x2F, 0x5C, 0x5B, 0x2F],
            [0x74, 0x5B, 0xBB, 0xBC, 0xEB, 0xEC, 0x2F, 0x2F, 0x5C, 0x5B, 0x2F],
            [0x74, 0x5B, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x5C, 0x5B, 0x2F],
            [0x74, 0x2D, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x2E, 0x5B, 0x2F],

            [0x74, 0x2C, 0x85, 0x2C, 0x55, 0x56, 0x56, 0x56, 0x5A, 0x5B, 0x2F],  # T
            [0x74, 0x85, 0x85, 0x85, 0x5B, 0x00, 0x00, 0x01, 0x5C, 0x5B, 0x2F],
            [0x74, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x2E, 0x5B, 0x2F],

            [0x74, 0x2C, 0x86, 0x86, 0x55, 0x56, 0x56, 0x56, 0x5A, 0x5B, 0x2F],# S
            [0x74, 0x86, 0x86, 0x2C, 0x5B, 0x00, 0x00, 0x01, 0x5C, 0x5B, 0x2F],
            [0x74, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x2E, 0x5B, 0x2F],

            [0x74, 0x2C, 0x2C, 0x2C, 0x55, 0x56, 0x56, 0x56, 0x5A, 0x5B, 0x2F], # I
            [0x74, 0x8A, 0x8B, 0x8F, 0x5B, 0x00, 0x00, 0x02, 0x5C, 0x5B, 0x2F],
            [0x2E, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x4F, 0x2E, 0x2D, 0x2F],

            [0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x2F]]

  def _load_tiles(self):
    tiles = []
    for number in range(0xFF):
      hex_number = f'{number:02x}'.upper()
      image = self._open_image("images/tiles/"+hex_number+".png")
      tiles.append(image)
    self.tiles = tiles

  def _open_image(self, path):
    return np.array(Image.open(path).convert('RGB'))

  def set_values(self, values, template):
    start_indices = [[5, 6], [8, 6], [11, 6], [14, 6], [8, 16], [11, 16], [14, 16]]
    for number, value in enumerate(values):
      values = [int(digit_str) for digit_str in f'{value:03}']
      indices = start_indices[number]
      template[indices[0]:indices[0]+1, indices[1]:indices[1]+3] = values

    return template

  def create_image(self, values):
    template_left = self.get_static_left_part()
    template_right = self.get_static_right_part()
    template = np.concatenate((template_left, template_right), axis=1)
    template = self.set_values(values, template)

    for column_nr, column in enumerate(template):
      for row_nr, tile_nr in enumerate(column):
        tile = self.tiles[tile_nr]
        if(row_nr > 0):
          row = np.concatenate((row,tile), axis=1)
        else:
          row = tile
      if(column_nr > 0):
        result = np.concatenate((result, row), axis=0)
      else:
        result = row

    cv2.imwrite("screenshots/stats.png", result)