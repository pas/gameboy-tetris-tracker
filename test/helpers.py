import cv2
import numpy as np
from PIL import Image

from tetristracker.image.gameboy_image import GameboyImage
from tetristracker.processor.gameboy_view_processor import GameboyViewProcessor
from tetristracker.processor.number_processor import SequentialNumberProcessor
from tetristracker.processor.playfield_processor import PlayfieldProcessor
from tetristracker.processor.preview_processor import PreviewProcessor


def create_gameboy_view_processor_with(path):
  image = np.array(Image.open(path).convert('RGB'))
  return GameboyViewProcessor(image)


def get_preview(processor):
  preview_image = processor.get_preview()
  return PreviewProcessor(preview_image, image_is_tiled=True).run()


def get_image(path):
  return cv2.imread(path)


def get_score(processor):
  score_image = processor.get_score()
  score = get_number(score_image)
  return score


def get_playfield(processor):
  playfield_image = processor.get_playfield()
  return PlayfieldProcessor(playfield_image, image_is_tiled=True).run(return_on_transition=True)


def get_number(number_image, save_image=False):
  number_image = GameboyImage(number_image, number_image.shape[0], number_image.shape[1],
                              number_image.shape[2], number_image.shape[3], is_tiled=True)

  if(save_image):
    cv2.imwrite("test/number.png", number_image.image)

  number_processor = SequentialNumberProcessor(number_image.image)
  level = number_processor.get_number()
  return level


def write_image(name, image):
  cv2.imwrite("test/" + name + ".png", image)

def create_testing_array_full_view():
  array = [[-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, 1, 1, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, 1, 1, -99, -99, -99, -99],
           [0, 0, 0, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, 0, -99, -99, -99, -99, -99, -99, -99],
           [3, 3, 3, 9, 10, 10, 11, -99, -99, -99],
           [3, -99, -99, 4, 4, 4, -99, -99, -99, -99],
           [4, -99, -99, -99, 4, -99, -99, 1, 1, -99],
           [4, 4, -99, 3, 3, 3, -99, -99, 1, 1],
           [4, -99, -99, 3, -99, -99, -99, -99, -99, 4],
           [2, 2, -99, 1, 1, -99, -99, -99, 4, 4],
           [2, 2, -99, -99, 1, 1, -99, -99, -99, 4]]
  return (np.array(array))


def create_testing_array_full_view_2():
  array = [[-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, 6, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, 7, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, 7, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, 8, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, 6],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, 7],
           [-99, -99, -99, -99, 5, -99, -99, -99, -99, 7],
           [-99, -99, -99, -99, 5, 5, -99, 4, -99, 8],
           [-99, -99, 3, 3, 3, 5, 4, 4, 2, 2],
           [-99, -99, 3, 9, 10, 10, 11, 4, 2, 2]]
  return (np.array(array))


def create_testing_array_s2():
  array = [[-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, 3, 3, 3, -99, -99, -99, -99],
           [-99, -99, -99, 3, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, 2, 2, -99, -99, -99, 4],
           [-99, -99, -99, -99, 2, 2, -99, 5, 4, 4],
           [-99, 2, 2, -99, 5, 5, -99, 5, 5, 4],
           [-99, 2, 2, 5, 5, -99, 5, 5, 5, -99],
           [-99, -99, 1, 1, -99, 5, 5, -99, -99, -99],
           [-99, -99, -99, 1, 1, 1, -99, -99, -99, -99],
           [-99, -99, -99, -99, 1, 1, -99, -99, -99, -99],
           [-99, -99, -99, -99, 1, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, 2, 2, -99, -99, -99, -99],
           [-99, -99, -99, -99, 2, 2, -99, -99, -99, -99],
           [-99, -99, -99, -99, 3, 3, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, 3, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, 3, -99, -99, 2, 2],
           [-99, -99, -99, -99, 1, 1, -99, -99, 2, 2],
           [-99, -99, 5, -99, 6, 1, 1, -99, 2, 2]]
  return (np.array(array))


def create_testing_array_s2_without_dropping_piece():
  array = [[-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, 2, 2, -99, -99, -99, 4],
           [-99, -99, -99, -99, 2, 2, -99, 5, 4, 4],
           [-99, 2, 2, -99, 5, 5, -99, 5, 5, 4],
           [-99, 2, 2, 5, 5, -99, 5, 5, 5, -99],
           [-99, -99, 1, 1, -99, 5, 5, -99, -99, -99],
           [-99, -99, -99, 1, 1, 1, -99, -99, -99, -99],
           [-99, -99, -99, -99, 1, 1, -99, -99, -99, -99],
           [-99, -99, -99, -99, 1, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, 2, 2, -99, -99, -99, -99],
           [-99, -99, -99, -99, 2, 2, -99, -99, -99, -99],
           [-99, -99, -99, -99, 3, 3, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, 3, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, 3, -99, -99, 2, 2],
           [-99, -99, -99, -99, 1, 1, -99, -99, 2, 2],
           [-99, -99, 5, -99, 6, 1, 1, -99, 2, 2]]
  return (np.array(array))


def create_testing_array_s2_next_piece():
  """
  This example was artificially created by hand
  """
  array = [[-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, 5, 5, -99, -99, -99, -99],
           [-99, -99, -99, 5, 5, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, 2, 2, -99, -99, -99, 4],
           [3, 3, 3, -99, 2, 2, -99, 5, 4, 4],
           [3, 2, 2, -99, 5, 5, -99, 5, 5, 4],
           [-99, 2, 2, 5, 5, -99, 5, 5, 5, -99],
           [-99, -99, 1, 1, -99, 5, 5, -99, -99, -99],
           [-99, -99, -99, 1, 1, 1, -99, -99, -99, -99],
           [-99, -99, -99, -99, 1, 1, -99, -99, -99, -99],
           [-99, -99, -99, -99, 1, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, 2, 2, -99, -99, -99, -99],
           [-99, -99, -99, -99, 2, 2, -99, -99, -99, -99],
           [-99, -99, -99, -99, 3, 3, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, 3, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, 3, -99, -99, 2, 2],
           [-99, -99, -99, -99, 1, 1, -99, -99, 2, 2],
           [-99, -99, 5, -99, 6, 1, 1, -99, 2, 2]]
  return (np.array(array))


def create_testing_array_s1():
  array = [[-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, 1, 1, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, 1, 1, -99, -99, -99, -99],
           [0, 0, 0, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, 0, -99, -99, -99, -99, -99, -99, -99],
           [3, 3, 3, 9, 10, 10, 11, -99, -99, -99],
           [3, -99, -99, 4, 4, 4, -99, -99, -99, -99],
           [4, -99, -99, -99, 4, -99, -99, 1, 1, -99],
           [4, 4, -99, 3, 3, 3, -99, -99, 1, 1],
           [4, -99, -99, 3, -99, -99, -99, -99, -99, 4],
           [2, 2, -99, 1, 1, -99, -99, -99, 4, 4],
           [2, 2, -99, -99, 1, 1, -99, -99, -99, 4]]
  return (np.array(array))


def create_testing_array_high_parity():
  array = [[-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, 4, -99, -99, -99, 4, -99],
           [-99, -99, -99, 4, 4, 4, -99, 4, 4, 4], ]
  return (np.array(array))


def create_testing_array_full_line_grey():
  array = [[-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [0, 0, 0, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, 0, -99, -99, -99, -99, -99, -99, -99],
           [12, 12, 12, 12, 12, 12, 12, 12, 12, 12],
           [3, -99, -99, 4, 4, 4, -99, 3, -99, -99],
           [4, -99, -99, -99, 4, -99, -99, 1, 1, -99],
           [4, 4, -99, 3, 3, 3, -99, -99, 1, 1],
           [4, -99, -99, 3, -99, -99, -99, -99, -99, 4],
           [2, 2, -99, 1, 1, -99, -99, -99, 4, 4],
           [2, 2, -99, -99, 1, 1, -99, -99, -99, 4]]
  return (np.array(array))


def create_testing_array_full_line():
  array = [[-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, -99, -99, -99, -99, -99, -99, -99, -99],
           [0, 0, 0, -99, -99, -99, -99, -99, -99, -99],
           [-99, -99, 0, -99, -99, -99, -99, -99, -99, -99],
           [3, 3, 3, 9, 10, 10, 11, 3, 3, 3],
           [3, -99, -99, 4, 4, 4, -99, 3, -99, -99],
           [4, -99, -99, -99, 4, -99, -99, 1, 1, -99],
           [4, 4, -99, 3, 3, 3, -99, -99, 1, 1],
           [4, -99, -99, 3, -99, -99, -99, -99, -99, 4],
           [2, 2, -99, 1, 1, -99, -99, -99, 4, 4],
           [2, 2, -99, -99, 1, 1, -99, -99, -99, 4]]
  return (np.array(array))
