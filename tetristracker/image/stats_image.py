import cv2
import numpy as np
from PIL import Image


class StatsImage:
  def __init__(self):
    self._load_tiles()

  def get_static_part(self):
    return [[0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F], # STATS
            [0x2F, 0x1C, 0x1D, 0x0A, 0x1D, 0x1C, 0x2F, 0x2F],
            [0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F],

            [0x2F, 0x81, 0x81, 0x81, 0x2F, 0x2F, 0x2F, 0x2F],  # J
            [0x2F, 0x2F, 0x2F, 0x81, 0x2F, 0x00, 0x00, 0x01],
            [0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F],

            [0x2F, 0x82, 0x82, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F],  # Z
            [0x2F, 0x2F, 0x82, 0x82, 0x2F, 0x00, 0x00, 0x03],
            [0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F],

            [0x2F, 0x2F, 0x83, 0x83, 0x2F, 0x2F, 0x2F, 0x2F],  # O
            [0x2F, 0x2F, 0x83, 0x83, 0x2F, 0x00, 0x00, 0x01],
            [0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F],

            [0x2F, 0x84, 0x84, 0x84, 0x2F, 0x2F, 0x2F, 0x2F],  # L
            [0x2F, 0x84, 0x2F, 0x2F, 0x2F, 0x00, 0x00, 0x01],
            [0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F],

            [0x2F, 0x2F, 0x85, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F],  # T
            [0x2F, 0x85, 0x85, 0x85, 0x2F, 0x00, 0x00, 0x01],
            [0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F],

            [0x2F, 0x2F, 0x86, 0x86, 0x2F, 0x2F, 0x2F, 0x2F],  # S
            [0x2F, 0x86, 0x86, 0x2F, 0x2F, 0x00, 0x01, 0x00],
            [0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F],

            [0x2F, 0x2F, 0x80, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F],  # I
            [0x2F, 0x2F, 0x88, 0x2F, 0x2F, 0x00, 0x00, 0x07],
            [0x2F, 0x2F, 0x88, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F],
            [0x2F, 0x2F, 0x89, 0x2F, 0x2F, 0x2F, 0x2F, 0x27],

            [0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F], # DANCER
            [0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0xBD, 0xBE, 0x2F],
            [0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0xDA, 0xDB, 0x2F]]

  def _load_tiles(self):
    tiles = []
    for number in range(0xFF):
      hex_number = f'{number:02x}'.upper()
      image = self._open_image("images/tiles/"+hex_number+".png")
      tiles.append(image)
    self.tiles = tiles

  def _open_image(self, path):
    return np.array(Image.open(path).convert('RGB'))

  def set_values(self, values, template):
    #column, row
    start_indices = [[4, 5], [7, 5], [10, 5], [13, 5], [16, 5], [19, 5], [22, 5]]
    for number, value in enumerate(values):
      values = [int(digit_str) for digit_str in f'{value:03}']
      indices = start_indices[number]
      template[indices[0]:indices[0]+1, indices[1]:indices[1]+3] = values

    return template

  def create_image(self, values):
    template = np.array(self.get_static_part())
    template = self.set_values(values, template)

    for column_nr, column in enumerate(template):
      for row_nr, tile_nr in enumerate(column):
        tile = self.tiles[tile_nr]
        if(row_nr > 0):
          row = np.concatenate((row,tile), axis=1)
        else:
          row = tile
      if(column_nr > 0):
        result = np.concatenate((result, row), axis=0)
      else:
        result = row

    cv2.imwrite("screenshots/stats.png", result)